{
  "_args": [
    [
      {
        "raw": "reload",
        "scope": null,
        "escapedName": "reload",
        "name": "reload",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\TunaFish\\Documents\\torvergata"
    ]
  ],
  "_from": "reload@latest",
  "_id": "reload@2.2.2",
  "_inCache": true,
  "_location": "/reload",
  "_nodeVersion": "8.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/reload-2.2.2.tgz_1503261459275_0.9151282387319952"
  },
  "_npmUser": {
    "name": "alallier",
    "email": "alexanderlallier@aol.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {
    "debug": "2.6.9",
    "depd": "1.1.2",
    "destroy": "1.0.4",
    "encodeurl": "1.0.2",
    "escape-html": "1.0.3",
    "etag": "1.8.1",
    "fresh": "0.5.2",
    "graceful-readlink": "1.0.1",
    "http-errors": "1.6.2",
    "ms": "2.0.0",
    "on-finished": "2.3.0",
    "parseurl": "1.3.2",
    "range-parser": "1.2.0",
    "statuses": "1.3.1",
    "unpipe": "1.0.0"
  },
  "_requested": {
    "raw": "reload",
    "scope": null,
    "escapedName": "reload",
    "name": "reload",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/reload/-/reload-2.2.2.tgz",
  "_shasum": "b59e1a9971dd8bee97f539830cc340ff1e805668",
  "_shrinkwrap": null,
  "_spec": "reload",
  "_where": "C:\\Users\\TunaFish\\Documents\\torvergata",
  "author": {
    "name": "JP Richardson",
    "email": "jprichardson@gmail.com"
  },
  "bin": {
    "reload": "./bin/reload"
  },
  "bugs": {
    "url": "https://github.com/jprichardson/reload/issues"
  },
  "contributors": [
    {
      "name": "Alexander J. Lallier",
      "email": "alexanderlallier@aol.com"
    }
  ],
  "dependencies": {
    "cli-color": "~1.2.0",
    "commander": "~2.9.0",
    "finalhandler": "~1.0.3",
    "minimist": "~1.2.0",
    "open": "~0.0.5",
    "serve-static": "~1.12.3",
    "supervisor": "~0.12.0",
    "url-parse": "~1.1.9",
    "ws": "~3.0.0"
  },
  "description": "Node.js module to refresh and reload your code in your browser when your code changes. No browser plugins required.",
  "devDependencies": {
    "standard": "^10.0.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-su5O0Db0LSxAw4XHl7FeSlu79PYaFt+OFxEIdc2/kb+pechWOnlQxV2LB+kHVdjjghQ7/2J1G/AWH20qUAywQQ==",
    "shasum": "b59e1a9971dd8bee97f539830cc340ff1e805668",
    "tarball": "https://registry.npmjs.org/reload/-/reload-2.2.2.tgz"
  },
  "gitHead": "1f4f7ae76ecaadef3c4fa8a04bc437b54db55f33",
  "homepage": "https://github.com/jprichardson/reload#readme",
  "keywords": [
    "reload",
    "refresh",
    "http",
    "express",
    "development"
  ],
  "license": "MIT",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "alallier",
      "email": "alexanderlallier@aol.com"
    },
    {
      "name": "jprichardson",
      "email": "jprichardson@gmail.com"
    },
    {
      "name": "vesln",
      "email": "hi@vesln.com"
    }
  ],
  "name": "reload",
  "optionalDependencies": {},
  "readme": "reload\n=======\n\n[![Build Status](https://travis-ci.org/alallier/reload.svg?branch=master)](https://travis-ci.org/alallier/reload)\n[![Build status](https://ci.appveyor.com/api/projects/status/4uuui532bpht2ff7/branch/master?svg=true)](https://ci.appveyor.com/project/alallier/reload/branch/master)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n[![NPM version](https://img.shields.io/npm/v/reload.svg)](https://www.npmjs.com/package/reload)\n\nAutomatically refresh and reload your code in your browser when your code changes. No browser plugins required.\n\nTable Of Contents\n---\n* [Why](#why)\n* [How does it work?](#how-does-it-work)\n* [Installation](#installation)\n* [Two ways to use reload](#two-ways-to-use-reload)\n* [Using reload in Express](#using-reload-in-express)\n  * [Express Example](#express-example)\n  * [Manually firing server-side reload events](#manually-firing-server-side-reload-events)\n  * [API for Express](#api-for-express)\n    * [Parameters](#parameters)\n      * [Table of reload parameters](#table-of-reload-parameters)\n      * [Table of options for reload opts parameter](#table-of-options-for-reload-opts-parameter)\n      * **[Updating to version 2](#upgrading-to-version-2)**\n    * [Returns](#returns)\n* [Using reload as a command line application](#using-reload-as-a-command-line-application)\n  * [Usage for Command Line Application](#usage-for-command-line-application)\n* [License](#license)\n\nWhy?\n----\n\nRestarting your HTTP server and refreshing your browser is annoying.\n\nHow does it work?\n----------\n\nReload works in two different ways depending on if you're using it:\n\n1. In an existing Express application in which it creates a server side route for reload or,\n2. As a command line tool which starts its own Express application to monitor the file you're editing for changes and to serve `reload-client.js` to the browser.\n\nOnce reload-server and reload-client are connected, the client side code opens a [WebSocket](https://en.wikipedia.org/wiki/WebSocket) to the server and waits for the WebSocket to close, once it closes, reload waits for the server to come back up (waiting for a socket on open event), once the socket opens we reload the page.\n\nUpdating to version 2 from version 1\n---\n\nLooking for a quick guide to updating reload to version 2? Please refer to our update section [below](#upgrading-to-version-2).\n\nInstallation\n---\n\n    npm install [-g] [--save-dev] reload\n\n\nTwo ways to use reload\n---\n\nThere are two different ways to use reload.\n\n1. In an [Express](http://expressjs.com/) application, allowing your whole project to utilize reload when the code is altered\n2. As a command line application to serve up static HTML files and be able to reload when the code is altered\n\nUsing reload in Express\n---\nWhen used with Express reload creates a new Express route for reload. When you restart the server, the client will detect the server being restarted and automatically refresh the page.\n\nReload can be used in conjunction with tools that allow for automatically restarting the server such as [supervisor](https://github.com/isaacs/node-supervisor) (recommended), [nodemon](https://github.com/remy/nodemon), [forever](https://github.com/nodejitsu/forever), etc.\n\n### Express Example\n\n**`server.js`:**\n```javascript\nvar express = require('express')\nvar http = require('http')\nvar path = require('path')\nvar reload = require('../../reload')\nvar bodyParser = require('body-parser')\nvar logger = require('morgan')\n\nvar app = express()\n\nvar publicDir = path.join(__dirname, 'public')\n\napp.set('port', process.env.PORT || 3000)\napp.use(logger('dev'))\napp.use(bodyParser.json()) // Parses json, multi-part (file), url-encoded\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(publicDir, 'index.html'))\n})\n\nvar server = http.createServer(app)\n\n// Reload code here\nreload(app);\n\nserver.listen(app.get('port'), function () {\n  console.log('Web server listening on port ' + app.get('port'))\n})\n\n```\n\n**`public/index.html`:**\n```html\n<!doctype html>\n<html>\n  <head>\n    <title>Reload Express Sample App</title>\n  </head>\n  <body>\n    <h1>Reload Express Sample App</h1>\n    <!-- All you have to do is include the reload script and have it be on every page of your project -->\n    <script src=\"/reload/reload.js\"></script>\n  </body>\n</html>\n```\n\n**Refer to the [reload express sample app](expressSampleApp) for this working example.**\n\n### Manually firing server-side reload events\n\nYou can manually call a reload event by calling `reload()` yourself. An example is shown below:\n\n```javascript\nreloadServer = reload(app);\nwatch.watchTree(__dirname + \"/public\", function (f, curr, prev) {\n    // Fire server-side reload event\n    reloadServer.reload();\n});\n```\n\n### API for Express\n\n```javascript\nreload(app, opts)\n```\n\n#### Parameters\n\n##### Table of reload parameters\n\n| Parameter Name | Type     | Description                                                                                                         | Optional |\n|----------------|----------|---------------------------------------------------------------------------------------------------------------------|----------|\n| app            | object   | The app. It may work with other frameworks, or even with Connect. At this time, it's only been tested with Express. |          |\n| opts           | object   | An optional object of options for reload. Refer to table [below](#table-of-options-for-reload-opts-parameter) on possible options                                  | âœ“        |\n\n##### Table of options for reload opts parameter\n\n| Parameter Name           | Type    | Description                                                                                                                                                                                                                                                                                                                                                                                                 | Optional | Default  |\n|--------------------------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------|----------|\n| port                     | number  | Port to run reload on.                                                                                                                                                                                                                                                                                                                                                                                      | âœ“        | `9856`   |\n| webSocketServerWaitStart | boolean | When enabled will delay starting and opening WebSocket server when requiring reload. After enabling use the `startWebSocketServer` function returned in the object provided by the API to start the WebSocket. **_Note_**: Failing to call the returned function with this option enabled will cause reload not to work. See [return API](Returns) for more information                                     | âœ“        | `false`  |\n| route                    | string  | Route that reload should use to serve the client side script file. Changing the route will require the script tag URL to change. Reload will always strip any occurrence of reload.js and append reload.js for you. This is to ensure case, order, and use of / is correct. For example specifying newRoutePath as the route will give reload a route of newRoutePath/reload.js. (Recommend not modifying). | âœ“        | `reload` |\n| verbose                  | boolean | If set to true, will show logging on the server and client side.                                                                                                                                                                                                                                                                                                                                            | âœ“        | `false`  |\n\n##### Upgrading to version 2\n\nReload dropped support for server. The only required parameter for reload is `app`.\n\n* Upgrade with required arguments: `reload(server, app)` becomes `reload(app)`\n\n* Upgrade with required arguments and the one optional argument: `reload(server, app, true)` becomes `reload(app, {verbose: true})`\n\nTo read more about the API breaking changes please refer to the [changelog](CHANGELOG.md#api-breaking-changes).\n\n#### Returns\n\nAn **object** containing:\n\n| Name                 | Type     | Description                                                                                                                                                                                                                |\n|----------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| reload               | function | A function that when called reloads all connected clients. For more information see [manually firing server-side reload events](#manually-firing-server-side-reload-events).                                               |\n| startWebSocketServer | function | Starts and opens the WebSocket server required for reload. Only active when using the optional parameter `webSocketServerWaitStart`. Read the [parameters](#table-of-options-for-reload-opts-parameter) for more information |\n\nUsing reload as a command line application\n---\n\nThere are two ways to use the command line application.\n\n1. In a directory serving blank static HTML files or\n2. In a project with a `package.json` file\n\nEach will require different modes of installing.\n\nIn case one you should install reload globally with `npm install reload -g`. Also with reload installed globally you can go to any directory with an HTML file and use the command reload to constantly watch it and reload it while you make changes.\n\nIn case two you should install locally with `npm install --save-dev`, since this tool is to aid in development you should install it as a dev dependency.\n\nNavigate to your html directory:\n\n    reload -b\n\nThis will open your `index.html` file in the browser. Any changes that you make will now reload in the browser. You don't need to modify your HTML at all.\n\n### Usage for Command Line Application\n\n```\nUsage: reload [options]\n\nOptions:\n\n  -h, --help                     output usage information\n  -V, --version                  output the version number\n  -b, --browser                  Open in the browser automatically.\n  -n, --hostname [hostname]      If -b flag is being used, this allows for custom hostnames. Defaults  to localhost.\n  -d, --dir [dir]                The directory to serve up. Defaults to current dir.\n  -e, --exts [extensions]        Extensions separated by commas or pipes. Defaults to html,js,css.\n  -p, --port [port]              The port to bind to. Can be set with PORT env variable as well. Defaults to 8080\n  -s, --start-page [start-page]  Specify a start page. Defaults to index.html\n  -v, --verbose [verbose]        Turning on logging on the server and client side. Defaults to false\n\n```\n\nLicense\n---\n\n[(MIT License)](LICENSE)\n\nCopyright 2017\n\n### Orginal Author:\n\nJP Richardson  <jprichardson@gmail.com>\n\n### Owned by:\n\nAlexander J. Lallier <mralexlallier@gmail.com>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/jprichardson/reload.git"
  },
  "scripts": {
    "standard": "standard **/*.js bin/**/*",
    "test": "npm run standard"
  },
  "version": "2.2.2"
}
