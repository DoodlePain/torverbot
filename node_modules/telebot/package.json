{
  "_args": [
    [
      {
        "raw": "telebot@^1.2.3",
        "scope": null,
        "escapedName": "telebot",
        "name": "telebot",
        "rawSpec": "^1.2.3",
        "spec": ">=1.2.3 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\TunaFish\\Documents\\torvergata"
    ]
  ],
  "_from": "telebot@>=1.2.3 <2.0.0",
  "_id": "telebot@1.2.3",
  "_inCache": true,
  "_location": "/telebot",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/telebot-1.2.3.tgz_1501446486208_0.2769635673612356"
  },
  "_npmUser": {
    "name": "mullwar",
    "email": "mullwar@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "telebot@^1.2.3",
    "scope": null,
    "escapedName": "telebot",
    "name": "telebot",
    "rawSpec": "^1.2.3",
    "spec": ">=1.2.3 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/telebot/-/telebot-1.2.3.tgz",
  "_shasum": "0605cd88660c382c2bc0e1ad7a54bc4e0677804e",
  "_shrinkwrap": null,
  "_spec": "telebot@^1.2.3",
  "_where": "C:\\Users\\TunaFish\\Documents\\torvergata",
  "author": {
    "name": "Mullwar",
    "email": "mullwar@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mullwar/telebot/issues"
  },
  "dependencies": {
    "request": "^2.81.0"
  },
  "description": "The easy way to write Telegram bots.",
  "devDependencies": {
    "ava": "^0.19.1",
    "eslint": "^3.19.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-7boCJohw6Y/V5WuNH2HlNXxHTg0jPP27zMNhCsxJh0NaMWbayPDNs1it2W4OyGp1C7NZtJVitQG12FoIlh10/g==",
    "shasum": "0605cd88660c382c2bc0e1ad7a54bc4e0677804e",
    "tarball": "https://registry.npmjs.org/telebot/-/telebot-1.2.3.tgz"
  },
  "engines": {
    "node": ">= 6.0.0"
  },
  "gitHead": "ccd321717beaecca7111286f06bc933e85aa75c7",
  "homepage": "https://github.com/mullwar/telebot",
  "keywords": [
    "bot",
    "api",
    "wrapper",
    "telebot",
    "telegram",
    "telegram api",
    "telegram bot",
    "telegram bot api"
  ],
  "license": "MIT",
  "main": "lib/telebot.js",
  "maintainers": [
    {
      "name": "mullwar",
      "email": "mullwar@gmail.com"
    }
  ],
  "name": "telebot",
  "optionalDependencies": {},
  "readme": "![](http://i.imgur.com/eELz6Aw.jpg)\n\nThe easy way to write Telegram bots.\n\n[![Build Status](https://travis-ci.org/mullwar/telebot.svg)](https://travis-ci.org/mullwar/telebot) [![Dependency Status](https://david-dm.org/mullwar/telebot.svg)](https://david-dm.org/mullwar/telebot) ![Node.js Version](http://img.shields.io/node/v/telebot.svg) [![TeleBot Group](https://img.shields.io/badge/telegram-TeleBot%20Group-blue.svg)](https://goo.gl/gXvm12)\n\n**Library features:**\n\n- 🍎 Simple. Easy to use.\n- 🏰 Full [Telegram Bot API](https://core.telegram.org/bots/API) support.\n- 💰 Supports [payments](https://core.telegram.org/bots/payments).\n- 🔌 Supports [plugins](https://github.com/mullwar/telebot/tree/master/plugins).\n- 📡 Build-in modification and event system.\n- 🛠 Extendable and hackable.\n- 🔮 No callbacks, Promises only.\n- 🤓 Readable [changelog](https://github.com/mullwar/telebot/releases).\n- ☺️ Friendly [TeleBot community group](https://goo.gl/gXvm12).\n\n## 🔨 Installation\n\nDownload and install via [npm package manager](https://www.npmjs.com/package/telebot) (stable):\n\n```\nnpm install telebot --save\n```\n\nOr clone fresh code directly from git:\n\n```\ngit clone https://github.com/mullwar/telebot.git\ncd telebot\nnpm install\n```\n\n## 🕹 Usage\n\nImport `telebot` module and create a new bot object:\n\n```js\nconst TeleBot = require('telebot');\n\nconst bot = new TeleBot({\n    token: 'TELEGRAM_BOT_TOKEN', // Required. Telegram Bot API token.\n    polling: { // Optional. Use polling.\n        interval: 1000, // Optional. How often check updates (in ms).\n        timeout: 0, // Optional. Update polling timeout (0 - short polling).\n        limit: 100, // Optional. Limits the number of updates to be retrieved.\n        retryTimeout: 5000, // Optional. Reconnecting timeout (in ms).\n        proxy: 'http://username:password@yourproxy.com:8080' // Optional. An HTTP proxy to be used.\n    },\n    webhook: { // Optional. Use webhook instead of polling.\n        key: 'key.pem', // Optional. Private key for server.\n        cert: 'cert.pem', // Optional. Public key.\n        url: 'https://....', // HTTPS url to send updates to.\n        host: '0.0.0.0', // Webhook server host.\n        port: 443, // Server port.\n        maxConnections: 40 // Optional. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery\n    },\n    allowedUpdates: [], // Optional. List the types of updates you want your bot to receive. Specify an empty list to receive all updates.\n    usePlugins: ['askUser'], // Optional. Use build-in plugins from pluginFolder.\n    pluginFolder: '../plugins/', // Optional. Plugin folder location relative to telebot package.\n    pluginConfig: { // Optional. Plugin configuration.\n        // myPluginName: {\n        //   data: 'my custom value'\n        // }\n    }\n});\n```\n\nOr just:\n\n```js\nconst TeleBot = require('telebot');\nconst bot = new TeleBot('TELEGRAM_BOT_TOKEN');\n```\n\n*Don't forget to insert your [Telegram Bot API](https://core.telegram.org/bots#create-a-new-bot) token key.*\n\nTo start polling updates, use ```bot.start()```.\n\n```js\nbot.on('text', (msg) => msg.reply.text(msg.text));\n\nbot.start();\n```\n\nWe just created echo bot!\n\n## 🌱 Quick examples\n\nSend text on `/start` or `/hello` command:\n\n```js\nbot.on(['/start', '/hello'], (msg) => msg.reply.text('Welcome!'));\n```\n\nWhen sticker received, reply back:\n\n```js\nbot.on('sticker', (msg) => {\n    return msg.reply.sticker('http://i.imgur.com/VRYdhuD.png', { asReply: true });\n});\n```\n\nSends photo on \"show kitty\" or \"kitty\" text message (using RegExp):\n\n```js\nbot.on(/(show\\s)?kitty*/, (msg) => {\n    return msg.reply.photo('http://thecatapi.com/api/images/get');\n});\n```\n\nCommand with arguments `/say <your message>`:\n\n```js\nbot.on(/^\\/say (.+)$/, (msg, props) => {\n    const text = props.match[1];\n    return bot.sendMessage(msg.from.id, text, { replyToMessage: msg.message_id });\n});\n```\n\nWhen message was edited:\n\n```js\nbot.on('edit', (msg) => {\n    return msg.reply.text('I saw it! You edited message!', { asReply: true });\n});\n```\n\n*Note: `msg.reply` is a bot method shortcut, part of [shortReply](/plugins/shortReply.js) plugin.*\n\n***[See more examples!](/examples)***\n\n## ⏰ Events\n\nUse ```bot.on(<event>, <function>)``` to handle all possible TeleBot events.\n\nFor example, to catch a command, just add a slash:\n\n```js\nbot.on('/hello', (msg) => {\n  return bot.sendMessage(msg.from.id, `Hello, ${ msg.from.first_name }!`);\n});\n```\n\nAlso, you can catch multiple events:\n\n```js\nbot.on(['/start', 'audio', 'sticker'], msg => {\n  return bot.sendMessage(msg.from.id, 'Bam!');\n});\n```\n\n### TeleBot events:\n\n- **/&#42;** – any user command\n- **/\\<cmd\\>** – on specific command\n- **start** – bot started\n- **stop** – bot stopped\n- **reconnecting** – bot reconnecting\n- **reconnected** – bot successfully reconnected\n- **update** - on update\n- **tick** – on bot tick\n- **error** – an error occurred\n- **inlineQuery** - inline query data\n- **chosenInlineResult** - inline query chosen result\n- **callbackQuery** - button callback data\n- **shippingQuery** - incoming shipping query\n- **preShippingQuery** - incoming pre-checkout query\n\n#### Events:\n\n*keyboard*, *button*, *inlineKeyboard*, *inlineQueryKeyboard*, *inlineButton*, *answerList*, *getMe*, *sendMessage*, *deleteMessage*, *forwardMessage*, *sendPhoto*, *sendAudio*, *sendDocument*, *sendSticker*, *sendVideo*, *sendVideoNote*, *sendVoice*, *sendLocation*, *sendVenue*, *sendContact*, *sendChatAction*, *getUserProfilePhotos*, *getFile*, *kickChatMember*, *unbanChatMember*, *answerInlineQuery*, *answerCallbackQuery*, *answerShippingQuery*, *answerPreCheckoutQuery*, *editMessageText*, *editMessageCaption*, *editMessageReplyMarkup*, *setWebhook*\n\n### Telegram message events:\n\n- **&#42;** - any type of message\n- **text** – text message\n- **audio** – audio file\n- **voice** – voice message\n- **document** – document file (any kind)\n- **photo** – photo\n- **sticker** – sticker\n- **video** – video file\n- **videoNote** - video note\n- **contact** – contact data\n- **location** – location data\n- **venue** – venue data\n- **game** - game data\n- **invoice** - invoice for a payment\n- **edit** – edited message\n- **forward** – forwarded message\n- **pinnedMessage** – message was pinned\n- **newChatMembers** - new members that were added to the group or supergroup\n- **leftChatMember** – member was removed\n- **newChatTitle** – new chat title\n- **newChatPhoto** – new chat photo\n- **deleteChatPhoto** – chat photo was deleted\n- **groupChatCreated** – group has been created\n- **channelChatCreated** – channel has been created\n- **supergroupChatCreated** – supergroup has been created\n- **migrateToChat** – group has been migrated to a supergroup\n- **migrateFromChat** – supergroup has been migrated from a group\n\n*Read more about Telegram Bot API response types: https://core.telegram.org/bots/api#available-types*\n\n## 🚜 Modifiers\n\nYou can add modifier to process data before passing it to event.\n\n```js\nbot.mod('text', (data) => {\n  let msg = data.message;\n  msg.text = `📢 ${ msg.text }`;\n  return data;\n});\n```\n\nThis code adds emoji to every `text` message.\n\n### TeleBot modifiers:\n\n- **property** - mod form properties\n- **updateList** - list of updates in one tick\n- **update** - every update\n- **message** - process any type of message\n- **\\<type\\>** - specific type of message\n\n## 🔌 Plugins\n\nUse `usePlugins` config option to load build-in plugins from `pluginFolder`:\n\n```js\nconst bot = new TeleBot({\n    token: 'TELEGRAM_BOT_TOKEN',\n    usePlugins: ['askUser', 'commandButtons'],\n    pluginFolder: '../plugins/',\n    pluginConfig: {\n        // Plugin configs\n    }\n});\n```\n\nOr use ```plug(require(<plugin_path>))``` to plug an external plugin.\n\n***[Check out build-in plugin folder!](/plugins)***\n\n### Plugin structure\n\n```js\nmodule.exports = {\n    id: 'myPlugin', // Unique plugin name\n    defaultConfig: {\n        // Default plugin config\n        key: 'value'\n    },\n    plugin(bot, pluginConfig) {\n        // Plugin code\n    }\n};\n```\n\n## ⚙️ Methods\n\n### TeleBot methods:\n\n##### `on(<events>, <function>)`\n\nHandles events.\n\n##### `event(<event>, <data>)`\n\nInvokes the event handlers.\n\n##### `mod(<name>, <fn>)`\n\nAdd data modifier.\n\n##### `modRun(<names>, <data>)`\n\nRun data modifiers.\n\n##### `plug(<plugin function>)`\n\nUse plugin function.\n\n##### `keyboard([array of arrays], {resize, once, selective})`\n\nCreates `ReplyKeyboardMarkup` keyboard `replyMarkup` object.\n\n##### `button(<location | contact>, <text>)`\n\nCreates `KeyboardButton` button.\n\n##### `inlineButton(<text>, {url | callback | game | inline | inlineCurrent | pay})`\n\nCreates `InlineKeyboardButton` button object.\n\n##### `inlineKeyboard([array of arrays])`\n\nCreates inlineKeyboard object for normal bot messages.\n\n##### `answerList(<inline_query_id>, {nextOffset, cacheTime, personal, pmText, pmParameter})`\n\nCreates `answerInlineQuery` answer list object.\n\n##### `inlineQueryKeyboard([array of arrays])`\n\nCreates inlineKeyboard object for answerList articles.\n\n##### `start()`\n\nStart polling updates.\n\n##### `stop(<message>)`\n\nStop polling updates.\n\n### Telegram methods:\n\nTeleBot use standard [Telegram Bot API](https://core.telegram.org/bots/api#available-methods) method names.\n\n##### `getMe()`\n\nA simple method for testing your bot's auth token.\n\n##### `answerQuery(<answerList>)`\n\nUse this method to send `answerList` to an inline query.\n\n##### `getFile(<file_id>)`\n\nUse this method to get basic info about a file and prepare it for downloading.\n\n##### `sendMessage(<chat_id>, <text>, {parseMode, replyToMessage, replyMarkup, notification, webPreview})`\n\nUse this method to send text messages.\n\n##### `forwardMessage(<chat_id>, <from_chat_id>, <message_id>, {notification})`\n\nUse this method to forward messages of any kind.\n\n##### `deleteMessage(<chat_id>, <from_message_id>)`\n\nUse this method to delete a message. A message can only be deleted if it was sent less than 48 hours ago. Any such sent outgoing message may be deleted. Additionally, if the bot is an administrator in a group chat, it can delete any message. If the bot is an administrator of a supergroup or channel, it can delete ordinary messages from any other user, including service messages about people added or removed from the chat. Returns *True* on success.\n\n##### `sendPhoto(<chat_id>, <file_id | path | url | buffer | stream>, {caption, fileName, serverDownload, replyToMessage, replyMarkup, notification})`\n\nUse this method to send photos.\n\n##### `sendAudio(<chat_id>, <file_id | path | url | buffer | stream>, {title, performer, duration, caption, fileName, serverDownload, replyToMessage, replyMarkup, notification})`\n\nUse this method to send audio files, if you want Telegram clients to display the file as a playable voice message.\n\n##### `sendDocument(<chat_id>, <file_id | path | url | buffer | stream>, {caption, fileName, serverDownload, replyToMessage, replyMarkup, notification})`\n\nUse this method to send general files.\n\n##### `sendSticker(<chat_id>, <file_id | path | url | buffer | stream>, {fileName, serverDownload, replyToMessage, replyMarkup, notification})`\n\nUse this method to send `.webp` stickers.\n\n##### `sendVideo(<chat_id>, <file_id | path | url | buffer | stream>, {duration, width, height, caption, fileName, serverDownload, replyToMessage, replyMarkup, notification})`\n\nUse this method to send video files, Telegram clients support `mp4` videos (other formats may be sent as `Document`).\n\n##### `sendVideoNote(<chat_id>, <file_id | path | url | buffer | stream>, {duration, length, fileName, serverDownload, replyToMessage, replyMarkup, notification})`\n\nUse this method to send video messages.\n\n##### `sendVoice(<chat_id>, <file_id | path | url | buffer | stream>, {duration, caption, fileName, serverDownload, replyToMessage, replyMarkup, notification})`\n\nUse this method to send audio files, if you want Telegram clients to display the file as a playable voice message.\n\n##### `sendLocation(<chat_id>, [<latitude>, <longitude>], {replyToMessage, replyMarkup, notification})`\n\nUse this method to send point on the map.\n\n##### `sendVenue(<chat_id>, [<latitude>, <longitude>], <title>, <address>, {foursquareId, replyToMessage, replyMarkup, notification})`\n\nUse this method to send information about a venue.\n\n##### `getStickerSet(<name>)`\n\nUse this method to get a sticker set.\n\n##### `uploadStickerFile(<user_id>, <file_id | path | url | buffer | stream>)`\n\nUse this method to upload a .png file with a sticker for later use in createNewStickerSet and addStickerToSet methods (can be used multiple times).\n\n##### `createNewStickerSet(<user_id>, <name>, <file_id | path | url | buffer | stream>, <emojis>, {containsMasks, maskPosition})`\n\nUse this method to create new sticker set owned by a user. The bot will be able to edit the created sticker set.\n\n##### `addStickerToSet(<user_id>, <name>, <file_id | path | url | buffer | stream>, <emojis>, {maskPosition})`\n\nUse this method to add a new sticker to a set created by the bot.\n\n##### `setStickerPositionInSet(<sticker>, <position>)`\n\nUse this method to move a sticker in a set created by the bot to a specific position.\n\n##### `deleteStickerFromSet(<sticker>)`\n\nUse this method to delete a sticker from a set created by the bot.\n\n##### `sendContact(<chat_id>, <number>, <firstName>, <lastName>, { replyToMessage, replyMarkup, notification})`\n\nUse this method to send phone contacts.\n\n##### `sendAction(<chat_id>, <action>)`\n\nUse this method when you need to tell the user that something is happening on the bot's side. Choose one, depending on what the user is about to receive: *typing* for text messages, *upload_photo* for photos, *record_video* or *upload_video* for videos, *record_audio* or *upload_audio* for audio files, *upload_document* for general files, *find_location* for location data, *record_video_note* or *upload_video_note* for video notes.\n\n##### `sendGame(<chat_id>, <game_short_name>, {notification, replyToMessage, replyMarkup})`\n\nUse this method to send a game.\n\n##### `setGameScore(<user_id>, <score>, {force, disableEditMessage, chatId, messageId, inlineMessageId})`\n\nUse this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited *Message*, otherwise returns *True*. Returns an error, if the new score is not greater than the user's current score in the chat and force is *False*.\n\n##### `getGameHighScores(<user_id>, {chatId, messageId, inlineMessageId})`\n\nUse this method to get data for high score tables. Will return the score of the specified user and several of his neighbours in a game. On success, returns an *Array* of *GameHighScore* objects.\n\n##### `getUserProfilePhotos(<user_id>, {offset, limit})`\n\nUse this method to get a list of profile pictures for a user.\n\n##### `getFile(<file_id>)`\n\nUse this method to get basic info about a file and prepare it for downloading.\n\n##### `sendInvoice(<chat_id>, {title, description, payload, providerToken, startParameter, currency, prices, photo: {url, width, height}, need: {name, phoneNumber, email, shippingAddress}, isFlexible, notification, replyToMessage, replyMarkup})`\n\nUse this method to send invoices.\n\n##### `getChat(<chat_id>)`\n\nUse this method to get up to date information about the chat.\n\n##### `leaveChat(<chat_id>)`\n\nUse this method for your bot to leave a group, supergroup or channel.\n\n##### `getChatAdministrators(<chat_id>)`\n\nUse this method to get a list of administrators in a chat.\n\n##### `getChatMembersCount(<chat_id>)`\n\nUse this method to get the number of members in a chat.\n\n##### `getChatMember(<chat_id>, <user_id>)`\n\nUse this method to get information about a member of a chat.\n\n##### `kickChatMember(<chat_id>, <user_id>, {untilDate})`\n\nUse this method to kick a user from a group or a supergroup.\n\n##### `unbanChatMember(<chat_id>, <user_id>)`\n\nUse this method to unban a previously kicked user in a supergroup.\n\n##### `restrictChatMember(<chat_id>, <user_id>, {untilDate, canSendMessages, canSendMediaMessages, canSendOtherMessages, canAddWebPagePreviews})`\n\nUse this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights.\n\n##### `promoteChatMember(<chat_id>, <user_id>, {canChangeInfo, canPostMessages, canEditMessages, canDeleteMessages, canInviteUsers, canRestrictMembers, canPinMessages, canPromoteMembers})`\n\nUse this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n\n##### `exportChatInviteLink(<chat_id>)`\n\nUse this method to export an invite link to a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n\n##### `setChatPhoto(<chat_id>, <file_id | path | url | buffer | stream>)`\n\nUse this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n\n##### `deleteChatPhoto(<chat_id>)`\n\nUse this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n\n##### `setChatTitle(<chat_id>, <title>)`\n\nUse this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n\n##### `setChatDescription(<chat_id>, <description>)`\n\nUse this method to change the description of a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n\n##### `pinChatMessage(<chat_id>, <message_id>)`\n\nUse this method to pin a message in a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n\n##### `editMessageText({chatId & messageId | inlineMsgId}, <text>)`\n\nUse this method to edit text messages sent by the bot or via the bot (for inline bots).\n\n##### `editMessageCaption({chatId & messageId | inlineMsgId}, <caption>)`\n\nUse this method to edit captions of messages sent by the bot or via the bot (for inline bots).\n\n##### `editMessageReplyMarkup({chatId & messageId | inlineMsgId}, <replyMarkup>)`\n\nUse this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots).\n\n##### `answerCallbackQuery(<callback_query_id>, {text, url, showAlert, cacheTime})`\n\nUse this method to send answers to callback queries sent from inline keyboards.\n\n##### `answerShippingQuery(<shipping_query_id>, <ok> {shippingOptions, errorMessage})`\n\nUse this method to reply to shipping queries.\n\n##### `answerPreCheckoutQuery(<pre_checkout_query_id>, <ok> {errorMessage})`\n\nUse this method to respond to such pre-checkout queries.\n\n##### `setWebhook(<url>, <certificate>, <allowed_updates>, <max_connections>)`\n\nUse this method to specify a url and receive incoming updates via an outgoing webhook.\n\n##### `getWebhookInfo()`\n\nUse this method to get current webhook status.\n\n##### `deleteWebhook()`\n\nUse this method to remove webhook integration if you decide to switch back to getUpdates. Returns `True` on success.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mullwar/telebot.git"
  },
  "scripts": {
    "lint": "eslint **/*.js",
    "test": "ava test/index.js"
  },
  "version": "1.2.3"
}
